Oracle 12.2.0.2 RAC had a serious slowdown in the 2-node database. I will describe a study I have done about this.

    First, it was necessary to look at the events created by the sessions. For this, the following query was run;

select event, count (*) from v $ session where status = 'ACTIVE' and type <> ‘BACKGROUND 'group by event order by 1;

EVENT COUNT (*)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
RMAN backup & recovery I / O 4
SQL * Net message from client 2
SQL * Net message to client 3
SQL * Net more data to client 1
acknowledge over PGA limit 4
enq: IV - contention 1
enq: SQ - contention 121 → The problem seems to be caused by this event.

2. The above output shows us that there are performance problems due to one or more sequences used in the database. Sequences used with nocache in RAC environments are global database objects and can cause serious bottleneck in heavy use. This situation causes serious performance problems. Of course, using sequencele with cache also has some side effects. For example, if the database is somehow closed, sequences in the cache will disappear and this will create a gap in the data of the relevant column produced by ID or sequence.

3. We found the source of the problem but it is necessary to determine which sequence is causing the problem. In fact, the easiest way to detect this is to get an AWR report. When the performance problem starts in the morning, we can get an AWR report in any two hours of the morning.
SQL ordered by Executions

When I examine the insert statement above, it seems that SEQUENCE xxxxxx.SQ_BILGI sequence has been executed too much.

First I made this sequence cache 100 but

select event, count (*) from v $ session where status = 'ACTIVE' and type <> ‘BACKGROUND 'group by event order by 1;

when I run the query after seeing that the number of enq: SQ - contention event decreased but not completely

alter SEQUENCE xxxx.SQ_xxxx INFO CACHE 200;

I did. Again, when I ran the query below, I saw that the incident I had suffered did not come.

select event, count (*) from v $ session where status = 'ACTIVE' and type <> ‘BACKGROUND 'group by event order by 1;

EVENT COUNT (*)
- - - - - - - - - - - - - - - - - - - - - - - - - -
SQL * Net message from client 3
SQL * Net message to client 7
acknowledge over PGA limit 3
buffer busy waits 6
